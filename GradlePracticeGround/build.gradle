plugins {
    id 'groovy'
    id 'java'
    id 'war'
    id 'org.gretty' version '2.2.0'
}

ext.projectIds = ["group" : "org.gt.MyGradle", "version" : "0.1"]

import com.gradle.*

group = projectIds.group
version = projectIds.version

project(":model") {
    group = projectIds.group
    version = projectIds.version
    apply plugin: "java"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
    }
}

project(":repository") {
    group = projectIds.group
    version = projectIds.version
    apply plugin: "java"

    dependencies {
        compile project(":model")
    }

    repositories {
        mavenCentral()
    }
}

project(":web") {
    group = projectIds.group
    version = projectIds.version
    apply plugin: "java"
    apply plugin: "war"
    apply plugin: "org.gretty"

    dependencies {
        compile project(":repository")
        providedCompile "javax.servlet:servlet-api:2.5"
        runtime "javax.servlet:jstl:1.1.2"
    }

    repositories {
        mavenCentral()
    }
}

setDescription("Gradle Practice ground")
println "Description of project $name:" + project.description

//Custom Configuration
ext.cargoGroup = "org.codehaus.cargo"
ext.cargoVersion = "1.7.1"

configurations {
    cargo {
        description = "Classpath for Cargo Ant Tasks."
        visible = false
        resolutionStrategy {
            //failOnVersionConflict()
            cacheDynamicVersionsFor 0, "seconds"
        }
    }
}

//Extra Properties (Could be injected via org.gt.gradle.properties as well)
project.ext.myProp = "myValue"
ext {
    someOtherProp = 123
}

assert myProp == "myValue"
println project.someOtherProp
ext.someOtherProp = 567

//Setting project version
project.version = "1.0-SNAPSHOT"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        name "Spring repository"
        url "http://repo.spring.io/libs-release"
    }

    /*
    Declaring repositories from a flat directory
    flatDir(dir : "${System.properties['user.home']}/libs/cargo", name: "Local Libs Directory")
     */
}

jar {
    manifest {
        attributes "Main-Class" : "com.manning.gia.todo.ToDoApp"
    }
}

dependencies {
    //Custom configuration cargo
    cargo group: cargoGroup, name: "cargo-core-uberjar", version: cargoVersion
    cargo "$cargoGroup:cargo-ant:$cargoVersion"
//    {
//        exclude group: "xml-apis", module: "xml-apis"
//    }
    //Declaring file dependencies
    compile project(":model")
    compile project(":repository")
    cargo fileTree(dir : "${System.properties['user.home']}/libs/cargo", include: '*.jar')
    cargo "xml-apis:xml-apis:2.0.2"
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    implementation gradleApi()
    implementation localGroovy()
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//TaskActions
task first {
    doLast({ println "first" })
}
task second {
    doLast({ println "second" })
}

task printVersion(group: "versioning", description: "Prints project version", dependsOn: [second, first]) {
    doFirst {
        println "Before reading the project version"
    }
    .doLast {
        logger.quiet "Version: $version"
    }
}

task third(dependsOn: [printVersion]) {
    doLast({ println "third" })
}

//Adding Arbitrary code
version = new ProjectVersion(0, 1)

ext.versionFile = file('version.properties')

//Task Configuration (Defined without the left shift operators).
// These blocks are executed even before task action.
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() { //Invoked in Configuration Phase
    logger.quiet("Reading the version file")

    if (!versionFile.exists()) {
        throw new GradleException("Required version file ($versionFile.canonicalPath) does not exist")
    }

    Properties versionProperties = new Properties()

    versionFile.withInputStream {
        stream -> versionProperties.load(stream)
    }

    new ProjectVersion(versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(), versionProperties.release.toBoolean())
}


task makeReleaseVersion(type: ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from(sourceSets*.allSource) { //Takes all files and puts them into source Directory
        into 'src'
    }

    from(rootDir) {
        include versionFile.name //Adds version file to zip
    }
}

task backupReleaseDistribution(type: Copy) {
    //Not declaring dependency on the task createDistribution but just using the output of that.
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) {
    doLast() {
        logger.quiet("Releasing the project")
    }
}

//Adding task rules
tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier.") {
    String taskName ->
        if (taskName.startsWith("increment") && taskName.endsWith("Version")) {
            task(taskName) {
                String classifer = (taskName - "increment" - "version").toLowerCase() //Extracting classifier
                String currentVersion = version.toString()

                switch (classifer) {
                    case "major": ++version.major
                        break
                    case "minor": ++version.minor
                        break
                    default: throw new GradleException("Invalid version type $classifier. Allowed Types: ['Major','Minor']")
                }

                String newVersion = version.toString()
                logger.info "Incrementing $classifer project version: $currentVersion -> $newVersion"
                ant.propertyFile(file: versionFile) {
                    entry(key: classifier, type: "int", operation: "+", value: 1)
                }
            }
        }
}
//Hooking into task execution graph
gradle.taskGraph.whenReady { TaskExecutionGraph taskExecutionGraph ->
    if (taskExecutionGraph.hasTask(release)) {
        if (!version.release) {
            version.release = true
            ant.propertyfile(file: versionFile) {
                entry(key: "release", type: "string", operation: "=", value: "true")
            }
        }
    }
}

def releaseVersionListener = new ReleaseVersionListener()
gradle.taskGraph.addTaskExecutionGraphListener(releaseVersionListener)

task copyDependenciesToLocalDir(type: Copy) {
    from configurations.cargo.asFileTree
    into "${System.properties['user.home']}/libs/cargo"
}
//task deployToLocalTomcat {
//    //Get All dependencies of cargo as file tree.
//    FileTree cargoDeps = configurations.getByName("cargo").asFileTree
//    //Resolve Cargo ANT task definition from CLASSPATH
//    ant.taskDef(resource: "cargo.tasks", classpath: cargoDeps.asPath)
//
//    //Uses Cargo ANT task to download Tomcat7 distribution, deploy WAR and running the container
//    ant.cargo(containerId: "tomcat7x", action: "run", output: "$buildDir/output.log") {
//        configuration {
//            deployable(type: "war", file: "todo.war")
//        }
//    }
//
//    zipUrlInstaller(installUrl: "http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip")
//}

task printDependencies {
    doLast {
        configurations.getByName("cargo").each { println (it) }
    }
}