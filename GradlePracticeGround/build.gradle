plugins {
    id 'groovy'
}

import com.gradle.*

group 'MyGradle'
version '1.0-SNAPSHOT'

setDescription("Gradle Practice ground")
println "Description of project $name:" + project.description

//Extra Properties (Could be injected via org.gt.gradle.properties as well)
project.ext.myProp = "myValue"
ext {
    someOtherProp = 123
}

assert myProp == "myValue"
println project.someOtherProp
ext.someOtherProp = 567

//Setting project version
project.version = "1.0-SNAPSHOT"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation gradleApi()
    implementation localGroovy()
}

//TaskActions
task first {
    doLast({ println "first" })
}
task second {
    doLast({ println "second" })
}

task printVersion(group: "versioning", description: "Prints project version", dependsOn: [second, first]) {
    doFirst {
        println "Before reading the project version"
    }
    .doLast {
        logger.quiet "Version: $version"
    }
}

task third(dependsOn: [printVersion]) {
    doLast({ println "third" })
}

//Adding Arbitrary code
version = new ProjectVersion(0, 1)

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this(major, minor, Boolean.FALSE)
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this.major = major
        this.minor = minor
        this.release = release
    }


    @Override
    String toString() {
        return "$major.$minor${release ? "" : "-SNAPSHOT"}"
    }
}

ext.versionFile = file('version.properties')

//Task Configuration (Defined without the left shift operators).
// These blocks are executed even before task action.
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet("Reading the version file")

    if (!versionFile.exists()) {
        throw new GradleException("Required version file ($versionFile.canonicalPath) does not exist")
    }

    Properties versionProperties = new Properties()

    versionFile.withInputStream {
        stream -> versionProperties.load(stream)
    }

    new ProjectVersion(versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(), versionProperties.release.toBoolean())
}


task makeReleaseVersion(type : ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}


//Declaring tasks input and output
/*
task makeReleaseVersion(group: "versioning", description: "Makes project a release version.") {
    //Configuration Phase
    inputs.property ("release", version.release)
    outputs.file versionFile

    doLast({
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry(key: "release", type: "string", operation: "=", value: "true")
        }
    })
}*/
